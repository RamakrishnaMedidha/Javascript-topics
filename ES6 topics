ES6 FEATURES :
-------------
1)default parameters:
  ------------------
function es6DefaultParameters(name="RAM",age="24"){
console.log(`My name is ${name} and I am ${age} years old`);
}

2)template literals:
 --------------------
 var name="ES6";
 console.log(`subject name ${name}`);
 
 //syntax ${name} inside of the back-ticked string
 
3)multi-line strings:
--------------------
//use backticks for multi-line strings
  var roadPoem = `Then took the other, as just as fair,
    And having perhaps the better claim
    Because it was grassy and wanted wear,
    Though as for that the passing there
    Had worn them really about the same,`;

4. Destructuring Assignment in ES6:
------------------------------------
array destructruing:

var arr=[1,2,3,4,5,6,7,8,9];
var [one,two,...remain]=arr;
//for array variables can be any names
output:
------
one=1,two=2 and remain=[3,4,5,6,7,8,9]
	
var obj={name:'XYZ',age:24,gender:'M',DOB:'01-Jan-2001'};
var {name,DOB,...remain}=obj;
//for object destructuring key value must be matching rest operator variable can be any name
output:
------
name='XYZ',DOB='01-Jan-2001',remain={age:24,gender:'M'}

5) Enhanced Object Literals in ES6
Arrow Functions in ES6

1)new function vs Object.create:
--------------------------------
The object used in Object.create actually forms the prototype of the new object, where as in the new Function() form the declared properties/functions do not form the prototype.
Yes, Object.create builds an object that inherits directly from the one passed as its first argument.

With constructor functions, the newly created object inherits from the constructor's prototype, e.g.:
var o = new SomeConstructor();
In the above example, o inherits directly from SomeConstructor.prototype.
There's a difference here, with Object.create you can create an object that doesn't inherit from anything, Object.create(null);, on the other hand, if you set SomeConstructor.prototype = null; the newly created object will inherit from Object.prototype.
You cannot create closures with the Object.create syntax as you would with the functional syntax. This is logical given the lexical (vs block) type scope of JavaScript.
The object used in Object.create actually forms the prototype of the new object, where as in the new Function() form the declared properties/functions do not form the prototype.
Yes, Object.create builds an object that inherits directly from the one passed as its first argument.
With constructor functions, the newly created object inherits from the constructor's prototype, e.g.:					
var o = new SomeConstructor();
In the above example, o inherits directly from SomeConstructor.prototype.
There's a difference here, with Object.create you can create an object that doesn't inherit from anything, Object.create(null);, on the other hand, if you set SomeConstructor.prototype = null; the newly created object will inherit from Object.prototype.
You cannot create closures with the Object.create syntax as you would with the functional syntax. This is logical given the lexical (vs block) type scope of JavaScript.
	
